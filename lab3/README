Abdulrehman Khan
500968727
Section#22


1. I was able to implement the insertion and merge sort effectively, as it was correctly sorting both the inputs provided to it and giving the comparisons, swaps and copies operations correctly. In order to run this program within the termianl type either "insertionSort" or "mergeSort" followed by the "enter key", than type the collection of numbers you wish to be sorted and once finished press the "enter key" once again followed by pressing the "control key" and the "d" key at the same time (ctrl+d) which will execute and produce the output in the terminal. 

2. Using 1,2,3,4, and 5 as the terms being sorted with both algorithims.

Insertion Sort Analysis:

Worst case: Would be when everything needs sorting i.e. the array is sorted backwards of what we want. Using 5,4,3,2, and 1 the output produced is Comparisons:10, Swaps:10, Copies operations:5 which makes the T(n) (time complexity) for the worst case be O(n^(2)).   

Best case: Would be when there is nothing to sort i.e. everything is already sorted within the array. Using 1,2,3,4, and 5 the output produced is Comparisons:4, Swaps: 0, and Copies operations:5 which makes the T(n) (time complexity) for the best case be O(n).

Average case: Would be when half of the array is sorted and the other half is unsorted. Using 1,3,2,5, and 4 the output produced is Comparisons:6, Swaps:2, and Copies Operations:5, which makes the T(n) (time complexity) for the average case be somewhere in between O(n) and O(n^(2)).

Merge Sort Analysis:

Worst case: Would be when everything needs sorting i.e. the array is sorted backwards of what we want. Using 5,4,3,2, and 1 the output produced is Comparisons:63, Swaps:12, Copies operations:12 which makes the T(n) (time complexity) for the worst case be O(n* log n).   

Best case: Would be when there is nothing to sort i.e. everything is already sorted within the array. Using 1,2,3,4, and 5 the output produced is Comparisons:63, Swaps:63, and Copies operations:12 which makes the T(n) (time complexity) for the best case be O(n*log n).

Average case: Would be when half of the array is sorted and the other half is unsorted. Using 1,3,2,5, and 4 the output produced is Comparisons:65, Swaps:12, and Copies Operations:12, which makes the T(n) (time complexity) for the average case be O(n*logn).


 
